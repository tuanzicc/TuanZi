<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnyRadixConvert_CharacterIsNotValid" xml:space="preserve">
    <value>The character '{0}' in the argument is not a valid character of a {1} digit.</value>
  </data>
  <data name="AnyRadixConvert_Overflow" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Caching_CacheNotInitialized" xml:space="preserve">
    <value>The cache function has not been initialized and no available ICacheProvider implementation was found.</value>
  </data>
  <data name="ConfigFile_ItemKeyDefineRepeated" xml:space="preserve">
    <value>Duplicate definition of item identified as '{0}'</value>
  </data>
  <data name="ConfigFile_NameToTypeIsNull" xml:space="preserve">
    <value>The type named '{0}' does not exist</value>
  </data>
  <data name="Context_BuildServicesFirst" xml:space="preserve">
    <value>Please initialize the dependency injection service before using the TuanContext.IocRegisterServices property</value>
  </data>
  <data name="DbContextInitializerConfig_InitializerNotExists" xml:space="preserve">
    <value>Context initialization type '{0}' does not exist</value>
  </data>
  <data name="Filter_GroupOperateError" xml:space="preserve">
    <value>The type of operation in the query condition group is incorrect. It can only be And or Or.</value>
  </data>
  <data name="Filter_RuleFieldInTypeNotFound" xml:space="preserve">
    <value>The specified attribute '{0}' does not exist in type '{1}'.</value>
  </data>
  <data name="IocInitializerBase_TypeNotIRepositoryType" xml:space="preserve">
    <value>The type '{0}' is not a derived class from the repository interface 'IRepository'.</value>
  </data>
  <data name="IocInitializerBase_TypeNotIUnitOfWorkType" xml:space="preserve">
    <value>The type '{0}' is not a derived class of the operating unit "IUnitOfWork".</value>
  </data>
  <data name="Ioc_CannotResolveService" xml:space="preserve">
    <value>Unable to parse parameter of type '{1}' in constructor of type '{0}'</value>
  </data>
  <data name="Ioc_FrameworkNotInitialized" xml:space="preserve">
    <value>Tuan framework has not been initialized, please initialize</value>
  </data>
  <data name="Ioc_ImplementationTypeNotFound" xml:space="preserve">
    <value>Implementation type of type '{0}' cannot be found</value>
    <comment>{0}=service type</comment>
  </data>
  <data name="Ioc_NoConstructorMatch" xml:space="preserve">
    <value>Cannot find suitable parameter constructor in type '{0}'</value>
  </data>
  <data name="Ioc_TryAddIndistinguishableTypeToEnumerable" xml:space="preserve">
    <value>The implementation type cannot be '{0}' because this type cannot be distinguished from other types registered as '{1}'</value>
  </data>
  <data name="Logging_CreateLogInstanceReturnNull" xml:space="preserve">
    <value>When the log instance with the name '{0}' was created, '{1}' returned an empty instance.</value>
  </data>
  <data name="Map_MapperIsNull" xml:space="preserve">
    <value>MapperExtensions.Mapper can not be empty, please set the value</value>
  </data>
  <data name="Mef_HttpContextItems_NotFoundRequestContainer" xml:space="preserve">
    <value>The Mef component container for the valid range of Request does not exist in the current Http context.</value>
  </data>
  <data name="ObjectExtensions_PropertyNameNotExistsInType" xml:space="preserve">
    <value>The attribute named '{0}' does not exist in the specified object.</value>
  </data>
  <data name="ObjectExtensions_PropertyNameNotFixedType" xml:space="preserve">
    <value>The attribute type of the specified name '{0}' is not '{1}'.</value>
  </data>
  <data name="ParameterCheck_Between" xml:space="preserve">
    <value>The value of parameter '{0}' must be between '{1}' and '{2}'.</value>
  </data>
  <data name="ParameterCheck_BetweenNotEqual" xml:space="preserve">
    <value>The value of parameter '{0}' must be between '{1}' and '{2}' and cannot be equal to '{3}'.</value>
  </data>
  <data name="ParameterCheck_DirectoryNotExists" xml:space="preserve">
    <value>The specified directory path '{0}' does not exist.</value>
  </data>
  <data name="ParameterCheck_FileNotExists" xml:space="preserve">
    <value>The specified directory path '{0}' does not exist....</value>
  </data>
  <data name="ParameterCheck_NotEmpty_Guid" xml:space="preserve">
    <value>The value of parameter '{0}' cannot be Guid.Empty</value>
  </data>
  <data name="ParameterCheck_NotGreaterThan" xml:space="preserve">
    <value>The value of parameter '{0}' must be greater than '{1}'.</value>
  </data>
  <data name="ParameterCheck_NotGreaterThanOrEqual" xml:space="preserve">
    <value>The value of parameter '{0}' must be greater than or equal to '{1}'.</value>
  </data>
  <data name="ParameterCheck_NotLessThan" xml:space="preserve">
    <value>The value of parameter '{0}' must be less than '{1}'.</value>
  </data>
  <data name="ParameterCheck_NotLessThanOrEqual" xml:space="preserve">
    <value>The value of parameter '{0}' must be less than or equal to '{1}'.</value>
  </data>
  <data name="ParameterCheck_NotNull" xml:space="preserve">
    <value>The parameter '{0}' cannot be a null reference.</value>
  </data>
  <data name="ParameterCheck_NotNullOrEmpty_Collection" xml:space="preserve">
    <value>The parameter '{0}' cannot be a null reference or an empty collection.</value>
  </data>
  <data name="ParameterCheck_NotNullOrEmpty_String" xml:space="preserve">
    <value>The parameter '{0}' cannot be a null reference or an empty string.</value>
  </data>
  <data name="QueryCacheExtensions_TypeNotEntityType" xml:space="preserve">
    <value>Type '{0}' is not an entity type</value>
  </data>
</root>